package model;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class UGraphTest {

	@Test
	void addNodes() {
		UGraph graph = new UGraph();
			
		boolean node = graph.addNode(42, "testnode_0");
		assertTrue(graph.size() > 0);
		assertTrue(node);
		assertTrue(graph.getNode(42) != null, "Node is null, not inserted correctly");
	}
	
	@Test
	void deleteNode() {
		UGraph graph = new UGraph();
		
		boolean node =graph.addNode(42, "testnode_0");
		assertTrue(node, "node failed to be added");
		
		graph.removeNode(42);
		assertTrue(graph.size() == 0, "Node was not deleted.");
	}
	
	
	@Test
	void linkNodes() {
		UGraph graph = new UGraph();
		boolean node =graph.addNode(42, "testnode_0");
		boolean node2 =graph.addNode(13, "testnode_1");
		
		UNode n1 = graph.getNode(42);
		UNode n2 = graph.getNode(13);
		
		assertTrue(node, "node failed to be added");
		assertTrue(node2, "node failed to be added");
		
		graph.addEdge(1 , n1, n2, "");
		
		assertTrue(n1.getOutEdges().size() > 0, " no edge added to n1");
		assertTrue(n1.getInEdges().size() == 0, " improper edge added to n1");
		assertTrue(n2.getInEdges().size() > 0, " no edge added to n2");
		assertTrue(n2.getOutEdges().size() == 0, " improper edge added to n2");
		
	}
	
	@Test
	void getNodes() {
		UGraph graph = new UGraph();
		boolean node1 = graph.addNode(1, "a");
		boolean node2 = graph.addNode(2, "b");
		boolean node3 = graph.addNode(3, "c");
		
		assertTrue(node1, "node failed to be added");
		assertTrue(node2, "node failed to be added");
		assertTrue(node3, "node failed to be added");
		
		Integer[] nodes = graph.getAllNodes();
		assertTrue((nodes.length == 3), "All nodes failed to be returned");
	}
	
	@Test
	void getEdges() {
		UGraph graph = new UGraph();
		boolean node1 = graph.addNode(1, "aa");
		boolean node2 = graph.addNode(2, "bb");
		boolean node3 = graph.addNode(3, "cc");
		
		UNode n1 = graph.getNode(1);
		UNode n2 = graph.getNode(2);
		UNode n3 = graph.getNode(3);
		
		
		assertTrue(node1, "node failed to be added");
		assertTrue(node2, "node failed to be added");
		assertTrue(node3, "node failed to be added");
		
		graph.addEdge(4, n1, n2, "edge1");
		graph.addEdge(5, n1, n3, "edge2");
		
		Integer[] edges = graph.getAllEdges();
		assertTrue((edges.length == 2), "All edges failed to be returned");
	}
	
	@Test
	void deleteEdges() {
		UGraph graph = new UGraph();
		boolean node1 = graph.addNode(1, "node1");
		boolean node2 = graph.addNode(2, "node2");
		
		assertTrue(node1, "node failed to be added");
		assertTrue(node2, "node failed to be added");
		
		UNode n1 = graph.getNode(1);
		UNode n2 = graph.getNode(2);
		
		graph.addEdge(4, n1, n2, "edge1");
		
		graph.removeEdge(4);

		boolean hasEdge = true;
		
		Integer[] nodes = graph.getAllNodes();
		for(int i = 0; i < nodes.length; i++) 
		{
			if(nodes[i].getInEdges().contains(graph.getEdge(4)))
			{
				hasEdge = true;
			}
			if(nodes[i].getOutEdges().contains(graph.getEdge(4)))
			{
				hasEdge = true;
			}
		}
		assertTrue((hasEdge == false), "All edges failed to be deleted");
	}
	
	
}
